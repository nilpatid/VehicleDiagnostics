# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection


#spring.datasource.url = jdbc:postgresql://localhost:5432/postgres?user=postgres\u0026password=postgres\u0026sslmode=disable
spring.datasource.url = jdbc:postgresql://10.72.6.143:5432/d00f24af62b774417b6ede129c4e0f810?user=udf471f129ca44507b3279afb10016c85\u0026password=708cce72ca98404a9a624f1360ca123c\u0026sslmode=disable
# Username and password
#spring.datasource.username = postgres
#spring.datasource.password = postgres
spring.datasource.username = udf471f129ca44507b3279afb10016c85
spring.datasource.password = 708cce72ca98404a9a624f1360ca123c

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
